

url = 'https://sourceforge.net/projects/mingw-w64/files/'\
    'Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/'\
    '6.2.0/threads-posix/sjlj/'\
    'x86_64-6.2.0-release-posix-sjlj-rt_v5-rev1.7z'

waf extension:
      conf.load('c_cross_gnu')
  in waflib/extras/c_cross_gnu.py




http://www.hurryupandwait.io/blog/in-search-of-a-light-weight-windows-vagrant-box


objdump -x -D Windows-32bit/run_d.exe > /tmp/2.txt

cd /vagrant/PyInstaller/bootloader/
for i in */Windows-*bit/*.exe ; do
	objdump -x -D $i > $i.txt
done


zlib für mingw: libz-mingw-w64-dev (nicht in Debian jessie)


Cross-compiling from Linux to Windows
--------------------------------------------

arch=x86_64 options=--target-arch=64bit
arch=i686   options=--target-arch=32bit
python ./waf distclean configure build_release \
   CC=$arch-w64-mingw32-gcc WINRC=$arch-w64-mingw32-windres \
   STRIP=$arch-w64-mingw32-strip $options

Das wscript file braucht nur einen Änderung: Die Art, wie die
Plattform entschieden wird.

Pakete unter Mageia: mingw64-gcc mingw32-gcc
    Die binutils liegen dann in /usr/i686-w64-mingw32/bin/ und mit
    ARCH-PREFIX in in /usr/bin. gcc, ar, nm, goc und ranlib aber nur
    mit ARCH-PREFIX in in /usr/bin

Pakete unter Debian: gcc-mingw-w64 (Meta-Package für 32bit und 64bit
   targets)
   Alle Binaries liegen mit ARCH-PREFIX und THREADING-POSTFIX in
   /usr/bin. Ausserdem gitbt es "alternatives", ohne
   THREADING-POSTFIX, die per default auf die win32 Version zeigen.


mkdir macOSX/
# Download XCode_7.3.1.dmg into macOSX/
vagrant up build-darwin-sdk
scp build-darwin-sdk:/tmp/osxcross.tar.bz2 macOSX/
vagrant destroy -f build-darwin-sdk




# self-elevation from https://superuser.com/questions/108207
ELEVATE_POWERSHELL = <<EOS
param([switch]$Elevated)

function Test-Admin {
  $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
  $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}
if ((Test-Admin) -eq $false)  {
    if ($elevated) {
      # tried to elevate, did not work, aborting
    } else {
        "elevating"
        Start-Process powershell.exe -Verb RunAs -ArgumentList ('-noprofile -noexit -file "{0}" -elevated' -f ($myinvocation.MyCommand.Definition))
    }
    exit
}
"running with full privileges"
EOS
#    #{ELEVATE_POWERSHELL}


Visual C++ SDK paketieren
-----------------------------

Hintergrund (unsortiert):
- https://fedoraproject.org/wiki/Vagrant
- https://github.com/ambakshi/docker-wine-vcpython27
- https://developer.fedoraproject.org/tools/vagrant/

http://ooo-imath.sourceforge.net/wiki/index.php/Cross-compiling_for_Windows


Andere Ansätze:
- https://github.com/ehsan/msvc2013onwine
- https://rgithub.com/ambakshi/docker-wine-vcpython27/dev/ISOs/toolchain2013.py


    $packing_url = "https://raw.githubusercontent.com/ehsan/msvc2013onwine/master/package_from_installed.py"

    $packing_url = "https://cs.chromium.org/codesearch/f/chromium/tools/depot_tools/win_toolchain/package_from_installed.py?cl=4b73b02b36238fe6c8e71b647b0e1367c9ead9cc"

    choco install -y vcbuildtools -ia "/InstallSelectableItems VisualCppBuildTools_ATLMFC_SDK;Win10SDK_VisibleV1;Win81SDK_CppBuildSKUV1"

    "Install script for packaging VC++"
    $wc = New-Object System.Net.WebClient
    $wc.DownloadFile($packing_url, "$PWD\\package_from_installed.py")
    # create a dummy module which is required by package_from_installed.py
    #New-Item -ItemType file -Path "$PWD\\get_toolchain_if_necessary.py"


curl -o get_toolchain_if_necessary.py https://cs.chromium.org/codesearch/f/chromium/tools/depot_tools/win_toolchain/get_toolchain_if_necessary.py?cl=HEAD


    "Create dummy directories for package_from_installed.py"
    # package_from_installed.py expects these directories to exist.
    cd "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0"
    FIXME: Use mkdir:
    mkdir "DIA SDK" | Out-Null
    mkdir "DIA SDK\\bin" | Out-Null
    mkdir "DIA SDK\\idl" | Out-Null
    mkdir "DIA SDK\\lib" | Out-Null
    mkdir "DIA SDK\\include" | Out-Null


def build_windows_sdk(version)
  # FIXME: Find the installed version automatically in
  # C:\Program Files (x86)\Windows Kits\10\Include\
  winver = "10.0.10240.0"
  return <<-EOF
    cd Desktop
    echo 'def CalculateHash(a,b): return "out"' > get_toolchain_if_necessary.py
    c:/Python27/Python.exe package_from_installed.py --winver #{winver} #{version}
    cmd.exe /c copy "out.zip" "C:\\vagrant\\vs#{version}.zip"
  EOF
end

TODO:
* Versuchen, ob wir SDK und ATLMFC für PyInstaller brauchen (These: nein)
* Unnötiges aus zip-Archiv löschen, z.B. VC/redist/debug_noredits/*,
  wins_sdk/{Catalogs,Debugger,DesignTime,Remote,Shortcuts,Source}, VC/*/Src/*


Visual C++ in Wine laufen lassen
---------------------------------------

def packages_fedora
  return <<-EOF
    #dnf upgrade -y
    sudo dnf install -y wine unzip wget

    wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks
    # unset DISPLAY to avoid dialog boxes
    rm -rf ~/.wine
    #DISPLAY= sh ./winetricks win8 #dotnet462
    export WINEDEBUG=-all
    WINEDLLOVERRIDES="mscoree,mshtml=" wineboot -u

    wget https://www.python.org/ftp/python/3.5.3/python-3.5.3-embed-amd64.zip

    mkdir ~/.wine/drive_c/Python35
    cd ~/.wine/drive_c/Python35
    unzip ~/python-3.5.3-embed-amd64.zip
    cd ~

    #cd /vagrant/bootloader/
    #wine64 C:/Python35/python.exe ./waf configure

	#wget https://www.python.org/ftp/python/2.7.13/python-2.7.13.amd64.msi
	#wine64 msiexec /i python-2.7.13.amd64.msi
	#wine64 c:/Python27/python.exe

    wget https://aka.ms/vs/15/release/vs_community.exe
    wine64 vs_community.exe --quiet --add Microsoft.VisualStudio.Component.VC.CLI.Support
  EOF
end


  config.vm.define "fedora" do |b|
    b.vm.box = "fedora/25-cloud-base"
    # Using this URL will lead to a "File name too long" error
    #b.vm.box_url = "https://ftp.halifax.rwth-aachen.de/fedora/linux/releases/"\
    #           "25/CloudImages/x86_64/images/"\
    #           "Fedora-Cloud-Base-Vagrant-25-1.3.x86_64.vagrant-virtualbox.box"
    b.vm.provider :virtualbox do |v|
      v.memory = 768
    end
    b.vm.provision "fix permissions", :type => :shell, :privileged => true,
        # Allow some files to not be changed (e.g. due to directory layout)
        :inline => "chown -R vagrant: /vagrant || true"
    b.vm.provision "packages", :type => :shell, :inline => packages_fedora
  end

    b.vm.provision "build windows sdk", :type => :shell, :privileged => false,
        :inline => build_windows_sdk("2015"),
        :keep_color => true

    b.vm.provision "packages windows", :type => :shell, :privileged => false,
        :inline => packages_windows_sdk_chocolate("2015")



----------------------

Using MinGW-w64 in a Vagrant Windows machine

Prelude

As you may know, I'm one of the maintainers of <a
href="http://pyinstaller.org/">PyInstaller</a>, a tool for freezing
(packages) Python programs into stand-alone executables. For each
supported target platform PyInstaller includes a pre-compiled <a
href="http://pyinstaller.readthedocs.io/en/stable/advanced-topics.html#the-bootstrap-process-in-detail">”bootloader“</a>
which prepares everything for running Python code at run-time. For the
last releases, the bootloader was compiler by some co-maintainer for
all platforms, but he is very busy currently.

So I'm in the need of being able to build the bootloader for Linux (32
and 64 bit) Windows (32 and 64 bit) and OS X. Of course building for
Linux is no problem, and about OS X I will take care later.

While PyInstaller supports building the bootloader for Windows using
either Visual Studio or MinGW,
cross-compiling with MinGW is not yet possible. So I went ahead for
building with MinGW in a virtual machine. Fortunatly <a
href="https://borgbackup.readthedocs.io/en/stable/">BorgBackup</a>
provides a Vagrantfile for a Windows machine – and since BorgBackup is
build using PyInstaller, this looks like a good starting-point.

But, well it was not really. Althoug most of the problems that arose are
caused by restrictions of the virtual box provided by Microsft and by
restrictions of Vagrant for Windows guests on Linux hosts.

The BorgBackup's Vagrantfile

The BorgBackup's Vagrantfile uses rsync for shared folders to avoid
any changes to leak back from the guest to the host. The machine, as
provided by Microsoft does not include rsync. So the first "vagrant
up" is bount to fail and you need to run "provision" as a separate step
instead of passing "--provision" to "vagrant up". For this it installs
Cygwin, a Cygwin-based SSH server, and rsync. Since the machine is set
up for password authentication,




--------

http://stackoverflow.com/questions/3943412/can-i-link-msvcrt-statically-with-mingw
-> empfiehlt newlib

newlib cross build:

http://www.ifp.illinois.edu/~nakazato/tips/xgcc.html


sudo cp -a /tmp/usr/lib/libc.a /usr/$TARGET/lib/libnewlib.a


--disable-newlib-supplied-syscalls

cd /tmp
wget ftp://sourceware.org/pub/newlib/newlib-2.5.0.tar.gz
tar xzf newlib-*.tar.gz
rm -f newlib-*.tar.gz
cd newlib-*/newlib/

TARGET=i686-w64-mingw32
#mkdir $TARGET
#cd $TARGET
CC=$TARGET-gcc ./configure --host=$TARGET --disable-newlib-supplied-syscalls
make -C libc

--disable-dependency-tracking

            ctx.env.append_value('LINKFLAGS', '-nostdlib')
            ctx.env.append_value('LINKFLAGS', '-Wl,--exclude-libs,msvcrt.a')

            ctx.env.append_value('LINKFLAGS', '-static-libgcc')
            ctx.env.append_value('LINKFLAGS', '-nostdlib')

-Wl,-eWinMain



Install-Optionen für Visual Studio 2017:

* https://blogs.msdn.microsoft.com/vcblog/2016/11/16/introducing-the-visual-studio-build-tools/

* https://docs.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio




Funktionen aus msvcrt.dll
===============================
__argc
__dllonexit				not used by PyInstaller
__lconv_init			not used by PyInstaller
__set_app_type			not used by PyInstaller
__setusermatherr		not used by PyInstaller
__wargv
__wgetmainargs	not used by PyInstaller
__winitenv		not used by PyInstaller
_amsg_exit

_findclose		FindClose (32-Bit C Run Time)
_fmode			-- (noch nichtmal erwähnt) not used by PyInstaller
_get_osfhandle	-
_initterm		not used by PyInstaller
_iob			not used by PyInstaller
_lock			not used by PyInstaller
_unlock			not used by PyInstaller
_wcmdln			not used by PyInstaller

_wfindfirst		ohne w: FindFirstFile (32-Bit C Run Time)
_wfindnext		ohne w: FindNextFile (32-Bit C Run Time)

_stat			-
_wfopen
_setmode		-

_wtempnam		- (tmpnam -> GetTempFileName)

mbstowcs		-
setlocale		-


File Handling
---------------

_fullpath		GetFullPathName
https://github.com/tronkko/dirent/blob/master/include/dirent.h

_wmkdir
_wrmdir
_wremove
_wstat



Process and Environment Control Routines
----------------------------------------------
abort			-
clearerr		-
exit			ExitProcess
signal			SetConsoleCtrlHandler (ctrl-c only)
getenv			GetEnvironmentVariable
_onexit			-
_getpid			GetCurrentProcessId
_cexit			-


Stream Routines
-------------------
fclose			CloseHandle
feof			-
ferror			-
fflush			FlushFileBuffers
fprintf			-
fread			ReadFile
fseek			SetFilePointer
ftell			SetFilePointer (check return value)
fwrite			WriteFile
sprintf			wsprintf
vfprintf		-
_vsnprintf		-
_vsnwprintf		-
setbuf			-
_fileno			-


Memory Handling
--------------------
free			GlobalFree
malloc			GlobalAlloc
calloc			GlobalAlloc
memcpy			CopyMemory
memset			FillMemory, ZeroMemory


String Manipulation
---------------------
strcat			lstrcat
strchr			-
strcmp			lstrcmp
strcpy			lstrcpy
strlen			lstrlen
strncat			-
strncmp			-
strncpy			-
strrchr			-
strtok			-
wcscat			lstrcat
wcscmp			lstrcmp
wcscpy			lstrcpy
wcslen			lstrlen
_strdup			-


osxcorss
------------------

Zeug, das dort wohl aus dem SDK gelöscht werden kann

    # Remove some stuff we don't need for PyInstaller first
    sudo rm -rf target/SDK/tools/*/*dmg*
    sudo rm -rf target/SDK/*.sdk/usr/share/man
    sudo rm -rf target/SDK/*.sdk/usr/ lib,include /php
    sudo rm -rf target/SDK/*.sdk/System/Library/Printers/
    sudo rm -rf target/SDK/*.sdk/System/Library/PrivateFrameworks/
    # indeed we do not need Python.Framework
    sudo rm -rf target/SDK/*.sdk/System/Library/Frameworks/
AGL
AVKit
AVFoundation
Accelerate
Python
QTKit
QuickTime
AppleScript*
Audio*
Automator*
Calendar*
CloudKit
Collaboration
Contacts*
CoreAudioKit
CoreBluetooth
CoreGraphics
CoreImage
CoreLocation
CoreMIDI*
CoreMedia*
CoreTelephony
CoreVideo
CoreWLAN
DVDPlayback
DirectoryService
DiscRecording*
DiskArbit
DrawSprocket
EventKit
ForceFeedback
GameController
GameKit
Gameplay*
GSS
GLUT
IOBluetooth*
Image*
InputMethodKit
Installer*
Java*
Kerberos
Kernel
LDAP
LatentSemantic*
Media*
Multipeer*
NetFS
OpenAL OpenCL OpenDirectory OpenGL PCSC
OSAKit
Photos*
Ruby
Scripting*
Social
SyncService
TWAIN
Tcl
Tl
Video*
WebKit

